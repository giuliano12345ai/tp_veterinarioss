Sistema de Aprobaci√≥n:
Aprobaci√≥n No Directa
Parte 1: Desarrollo de un ejercicio pr√°ctico. Tendr√°n acceso el d√≠a del parcial.
Parte 2: Multiple choice te√≥rico. Tendr√°n acceso el d√≠a del parcial.
Aprobaci√≥n Directa (APD):
Parte 3: Desarrollo completo del ejercicio pr√°ctico.
Parte 4: En caso de aprobar la Parte 1 y 2, deber√°n resolver en vivo dos requerimientos adicionales relacionados al mismo proyecto.
Parte 5: Si logran resolver al menos uno de los dos requerimientos, se les tomar√° una breve defensa oral.

Parte 3 ‚Äì Desarrollo Pr√°ctico
Enunciado: Gesti√≥n de Turnos en una Cl√≠nica Veterinaria
Una cl√≠nica veterinaria cuenta con 10 profesionales veterinarios, que trabajan en consultorios individuales. Sus nombres son:
neiner, maximiliano
villegas, octavio
cardozo, marina
baus, christian
luccheta, giovanni
fern√°ndez, david
ochoa, gonzalo
gatto, catriel
fern√°ndez, mariano
bustos gil, felipe
Cada profesional brinda 3 tipos de servicios veterinarios:
consulta general ‚Äì $15000
vacunaci√≥n ‚Äì $20000
control post-quir√∫rgico ‚Äì $30000


‚ö†Ô∏è Importante: Aunque los datos estar√°n hardcodeados, tanto los nombres de servicios como los nombres de
veterinarios deben estar normalizados: la primera letra de cada palabra en may√∫scula y el resto en min√∫sculas.

Requerimientos del Programa
El programa deber√° desplegar un men√∫ principal con las siguientes opciones:

1. Registrar un turno
El usuario deber√° ingresar:
Nombre del veterinario (debe coincidir con uno de los 10 listados).
Tipo de servicio solicitado (consulta general, vacunaci√≥n o control post-quir√∫rgico).
Cantidad de turnos reservados (entre 1 y 10).

‚úîÔ∏è Todos los datos deben ingresarse como cadenas de texto y ser validados correctamente. El programa no debe romperse en esta instancia.
 ‚úîÔ∏è Mostrar el total a pagar en pesos al finalizar la reserva del turno.

2. Visualizar todos los datos
Mostrar un listado que incluya:
Veterinario
Servicio
Precio
Cantidad de turnos reservados


Los veterinarios deben estar ordenados alfab√©ticamente (A-Z).

3. Consultas
Mostrar un submen√∫ con las siguientes opciones:
üìã Listado con la cantidad total de turnos reservados por cada veterinario.
üìä Promedio de turnos por tipo de servicio entre todos los veterinarios.
üí≤ Recaudaci√≥n total acumulada por todos los veterinarios.
üìàVeterinarios ordenados alfab√©ticamente de la A-Z junto al total que recaud√≥ en concepto de servicios.
üìà Porcentaje de cada tipo de servicio respecto al total general de turnos.
üìâ Veterinario con menor cantidad total de turnos atendidos.
üìâ Porcentaje de turnos por veterinario respecto al total general.
üèÜ Servicio/s m√°s solicitado/s por cada veterinario.



Aspectos T√©cnicos y Formales
Pod√©s usar colorama y emojis para mejorar la visualizaci√≥n.
El ingreso y validaci√≥n de datos debe estar contenido en un m√≥dulo/biblioteca aparte.
El programa debe controlar que no se acceda a opciones sin datos cargados, informando al usuario si es necesario.
El c√≥digo debe estar correctamente modularizado, reutilizable y contar con comentarios de documentaci√≥n siguiendo las reglas de estilo de la c√°tedra.
Crear un repositorio privado en GitHub con el nombre:
 Apellido.Nombre.PrimerParcial
 Debe estar compartido con los docentes y su enlace enviado por el formulario oficial.



Parte 4 ‚Äì Requerimientos en Vivo
Si aprobaste la Parte 1 y 2 (Aprobaci√≥n No Directa), deber√°s desarrollar en vivo dos nuevos requerimientos relacionados al mismo sistema.

Parte 5 ‚Äì Defensa Oral
Si resolv√©s al menos uno de los requerimientos en vivo, deber√°s realizar una defensa oral del parcial para verificar la comprensi√≥n del c√≥digo. Es requisito fundamental hacerlo para la aprobaci√≥n del mismo.

Observaciones Finales
Pod√©s pedir ayuda a compa√±eros solo en forma de consultas conceptuales.
‚ùå No est√° permitido compartir c√≥digo.
En caso de usar IA, deb√©s hacerlo solo como herramienta puntual de apoyo, no como fuente principal del trabajo.
Se espera una soluci√≥n original, desarrollada con los contenidos abordados en clase.
No se pueden utilizar funciones ‚Äúm√°gicas‚Äù de Python como: sum, min, max, all, in (salvo en el rango del for), any, filter, map, enumerate, reversed, sorted, next.
Tampoco m√©todos para el manejo de listas como append, remove, etc. Toda soluci√≥n debe estar resuelta desde una perspectiva algor√≠tmica. En caso de dudas consultar.
No se puede usar comprensi√≥n de listas, salvo en el caso de la creaci√≥n de matrices y vectores
